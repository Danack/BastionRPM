user  nginx;


#this should equal your CPU cores at most
worker_processes     1;

#Bind the first worker to CPU0/CPU2, bind the second worker to CPU1/CPU3. This is suitable for HTT.
#worker_cpu_affinity 0101 1010;

#pid location - default is fine for me.
#pid        logs/nginx.pid;


#Only the "best" location directive gets taken, in this order:
#location =  <path>  (longest match wins)
#location ^~ <path>  (longest match wins)
#location ~  <path>  (first defined match wins)
#location    <path>  (longest match wins)


events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #Efficient file copying - http://wiki.nginx.org/HttpCoreModule#sendfile
    sendfile        off;

    #Hide Nginx Server Tokens / Hide Nginx version number
    server_tokens off;


    #buffers TCP requests to be more efficient
    # http://wiki.nginx.org/ReadMoreAboutTcpNopush
    tcp_nopush     on;

    tcp_nodelay on;

    #Time to keep the connection open, and time to tell the client to keep the
    #connection open. Use slightly larger server size value, as some clients keep
    #the connection open a little longer
    keepalive_timeout  75s 60s;

    log_format catchAll_requestTime '$remote_addr - $remote_user [$time_local]  '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    '"$host" "$request_time"';

    log_format requestTime '$remote_addr - $remote_user [$time_local]  '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    '"$host" "$request_time"';


    error_page   404  /404_static.html;
    error_page   500 502 503 504  /50x_static.html;

    # Not sure this will work or is wise.
    #location @fallback {
    #    echo_status 504;
    #    add_header Content-Type: "text/html; charset=UTF-8";
    #
    #    echo "<!DOCTYPE html>";
    #    echo "<html lang='en'>";
    #    echo "  <head>";
    #    echo "    <meta charset='utf-8'>";
    #    echo "    <title>Backend is down</title>";
    #    echo "  </head>";
    #    echo "  <body>";
    #    echo "    Backend service is offline, please retry in few minutes. $echo_timer_elapsed";
    #    echo "  </body>";
    #    echo "</html>";
    #}
    #
    #location / {
    #        error_page 502 504 = @fallback;
    #        proxy_connect_timeout   10s;
    #        proxy_pass              http://backend:8090;
    #        proxy_read_timeout      10800s;
    #}



    #Default server that goes nowhere,
    #prevents all requests going to first actual server
    server {
        listen 80 default_server;
        # listen 443 default_server ssl;
        # ssl_certificate     /usr/local/nginx/conf/cert.pem;
        # ssl_certificate_key /usr/local/nginx/conf/cert.key;

        access_log  /var/log/nginx/catchall.access.log catchAll_requestTime;
        error_log  /var/log/nginx/catchall.error.log;

        #This is a special status code that tells Nginx to just drop the connection
        #without closing it.
        return      444;
    }

    #include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*.conf;
}


